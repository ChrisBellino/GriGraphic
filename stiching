import pygame

from graphics import *


def grid(win, rows, columns, width, height):
    # Calculate width and height of the grid by taking the total width and height of the window and dividing it by the number of rows and colums
    grid_width = width / columns
    grid_height = height / rows


    for i in range(columns):
        x = i * grid_width
        #Draws a bold line every 3 columns
        if i % 3 == 0 and i != 0:
            bold_line = line(Point(x, 0), Point(x, height))
            bold_line.setWidth(3)
            bold_line.draw(win)
        else:
            line = line(Point(x, 0), Point(x, height))
            line.draw(win)

    # Drawing horizontal lines
    for i in range(rows):
        y = i * grid_height
        # Draw bold lines every 3 rows
        if i % 3 == 0 and i != 0:
            bold_line = line(Point(0, y), Point(width, y))
            bold_line.setWidth(3)
            bold_line.draw(win)
        else:
            line = line(Point(0, y), Point(width, y))
            line.draw(win)

# Function to create text entry boxes
def textboxes(win, rows, columns, width, height):
    # Calculate width and height of each box
    Box_width = width / columns
    Box_height = height / rows

    # Textboxes for each box in grid
    for row in range(rows):
        for column in range(columns):
            x = column * Box_width + Box_width / 2
            y = row * 47 + Box_height / 2  #if you know how to get the box to place in the center without having
            #to put the 47 in manually I think that would be better
            entry = Entry(Point(x, y), 1)
            entry.draw(win)


def ButtonQuit(win, text, command):
    button_rect = Rectangle(Point(320, 600), Point(420, 640))
    button_rect.setFill("grey")
    button_rect.draw(win)
    button_text = Text(Point(370, 620), text)
    button_text.draw(win)
    click_point = win.getMouse()
    x_click, y_click = click_point.getX(), click_point.getY()

    if 320 <= x_click <= 420 and 600 <= y_click <= 640:
        command()

def ButtonCheck(win, text, command):
    #Button check not working idk why I think its the coorundates of the box placement
    #Also the button does not have a function yet
    button_rect = Rectangle(Point(120, 600), Point(420, 640))
    button_rect.setFill("grey")
    button_rect.draw(win)
    button_text = text(Point(270, 620), text)
    button_text.draw(win)
    click_point = win.getMouse()
    x_click, y_click = click_point.getX(), click_point.getY()

    if 120 <= x_click <= 420 and 600 <= y_click <= 640:
        command()


def main():
    win = GraphWin("Sudoku", 640, 640)
    win.setBackground("white")

    grid_rows = 9
    grid_columns = 9

    grid(win, grid_rows, grid_columns, win.getWidth(), 440)  # Draw the Sudoku grid
    textboxes(win, grid_rows, grid_columns, win.getWidth(), win.getHeight())  # Create text entry boxes

    # Create Quit button
    closeButton = ButtonQuit(win, "Quit", win.quit)
    closeButton.draw(win)

    # Create Check button
    checkButton = ButtonCheck(win, "Check")
    checkButton.draw(win)

    win.getMouse()
    win.close()

if __name__ == "__main__":
    main()





pygame.font.int()
Window = pygame.display.set_mode((500,500))
# Pygame.display.set_mode: set_mode is function inside display mod.
# initializes  and sets side of pygame window
pygame.display.set_caption("Sudoku")
# displays title (in green)
x = 0
z = 0
diff = 500/9
# size of block
value = 0
defaultgrid = [
    [0, 0, 4, 0, 6, 0, 0, 0, 5],
    [7, 8, 0, 4, 0, 0, 0, 2, 0],
    [0, 0, 2, 6, 0, 1, 0, 7, 8],
    [6, 1, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 7, 5, 4, 0, 0, 6, 1],
    [0, 0, 1, 7 ,5, 0, 9, 3, 0],
    [0, 7, 0, 3, 0, 0, 0, 1, 0],
    [0, 4, 0, 2, 0, 6, 0, 0, 7],
    [0, 2, 0, 0, 0, 7, 4, 0, 0],
    ]
# nested list that display the default 9x9 grid on screen
font = pygame.font.SysFont("comicsans", 40)
font1 = pygame.font.SysFont("comicsans", 20)

# fillvalue fills the value entered by user in cell
def fillvalue(value):
    text1 = font.render(str(value), 1, (0, 0, 0))
    Window.blit(text1, (x * diff + 15, z * diff + 15))
# text1 stores digit entered by user

def raiseeror():
    text1 = font.render("wrong!", 1, (0, 0, 0))
    Window.blit(text1, (20, 570))

# fuction checks if value entered is valid or not
def validvalue(m, k, 1, value):
    for it in range(9):   # Sequence of nums starting from 0 is returned by range() and increments the num every time
        if m[k][it] == value:  # by 1 and stops before given number
            return False
        if m[it][1] == value:
            return False
    it = k//3
    jt = 1//3
    for k in range(it * 3, it * 3 + 3):
        for l in range (jt * 3, jt * 3 + 3):
            if m[k][1] == value:
                return False
    return True

def solvegame(defaultgrid, i, j):

    while defaultgrid[i][j]!= 0:
        if i < 8:
            i+= 1
        elif i == 8 and j == 8:
            return True
    pygame.event.pump()
    for it in range(1, 10):
        if validvalue(defaultgrid, i, j, it) == True:
            defaultgrid[i][j] = it
            global x, z
            x = i
            z = j
            Window.fill((255, 255, 255))
            drawlines()
            highlightbox()
            pygame.display.update()
            pygame.time.delay(20)
            if solvegame(defaultgrid, i, j) == 1:
                return True
            else:
                defaultgrid[i][j] = 0
            Window.fill((0, 0, 0))

            drawlines()
            highlightbox()
            pygame.display.update()
            pygame.time.delay(50)
        return False

def gameresult():
    text1 = font.render("game finished", 1, (0, 0, 0))
    Window.blit(text1, (20, 570))
    # function displays result after completing game
flag = True
flag1 = 0
flag2 = 0
rs = 0
error = 0
# flag is used to run the window

while flag:
    Window.fill((255, 182, 193))
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            flag = False
        if event.type == pygame.MOUSEBUTTONDOWN:
            flag1 = 1
            pos = pygame.mouse.get_pos()
            cord(pos)
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                x-= 1
                flag1 = 1
            if event.key == pygame.K_RIGHT:
                x+= 1
                flag1 = 1
            if event.key == pygame.K_UP:
                y-= 1
                flag1 = 1
            if event.key == pygame.K_DOWN:
                y+= 1
                flag1 = 1
            if event.key == pygame.K_1:
                value = 1
            if event.key == pygame.K_2:
                value = 2
            if event.key == pygame.K_3:
                value = 3
            if event.key == pygame.K_4:
                value = 4
            if event.key == pygame.K_5:
                value = 5
            if event.key == pygame.K_6:
                value = 6
            if event.key == pygame.K_7:
                value = 7
            if event.key == pygame.K_8:
                value = 8
            if event.key == pygame.K_9:
                value = 9
            if event.key == pygame.K_RETURN:
                flag2 = 1
            if event.key == pygame.K_r:
                rs = 0
                error = 0
                flag2 = 0
                defaultgrid=[
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            if event.key == pygame.K_d:
                rs = 0
                error = 0
                flag2 = 0
                defaultgrid = [
                    [0, 0, 4, 0, 6, 0, 0, 0, 5],
                    [7, 8, 0, 4, 0, 0, 0, 2, 0],
                    [0, 0, 2, 6, 0, 1, 0, 7, 8],
                    [6, 1, 0, 0, 7, 5, 0, 0, 9],
                    [0, 0, 7, 5, 4, 0, 0, 6, 1],
                    [0, 0, 1, 7, 5, 0, 9, 3, 0],
                    [0, 7, 0, 3, 0, 0, 1, 1, 0],
                    [0, 4, 0, 2, 6, 0, 0, 0, 7],
                    [0, 2, 0, 0, 7, 4, 0, 0, 0],
                ]
            if flag2 == 1:
               if solvegame(defaultgrid, 0, 0) == False:
                error = 1
            else:
                rs = 1
            flag2 = 0
        if value != 0:
            fillvalue(value)
            if validvalue(defaultgrid, int(x), int(z),
value) == True:
                defaultgrid[int(x)][int(z)] = value
                flag1 = 0
            else:
                defaultgrid[int(x)][int(z)] = 0
                raiseeror()
            value = 0

        if error == 1:
            raiseeror()
        if rs == 1:
            gameresult()
        drawlines()
        if flag1 == 1:
            highlightbox()
        pygame.display.update()

    pygame.quit()
