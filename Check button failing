from graphics import *
from random import randint

# Function to draw the grid
def grid(win, rows, columns, width, height):
    grid_width = width / columns
    grid_height = height / rows

    # Draw vertical lines
    for i in range(1, columns):
        x = i * grid_width
        vert_line = Line(Point(x, 0), Point(x, height))
        if i % 3 == 0:
            vert_line.setWidth(3)
        vert_line.draw(win)

    # Draw horizontal lines
    for i in range(1, rows):
        y = i * grid_height
        horiz_line = Line(Point(0, y), Point(width, y))
        if i % 3 == 0:
            horiz_line.setWidth(3)
        horiz_line.draw(win)

# Function to create a number grid
def num_grid(rows, columns, min_val, max_val, fill_percentage):
    grid = [[None] * columns for _ in range(rows)]  # Initialize an empty grid

    def valid(row, col, value):
        for i in range(9):
            if grid[row][i] == value or grid[i][col] == value:
                return False
        start_row, start_column = 3 * (row // 3), 3 * (col // 3)
        for i in range(start_row, start_row + 3):
            for j in range(start_column, start_column + 3):
                if grid[i][j] == value:
                    return False
        return True

    for row in range(rows):
        for column in range(columns):
            if randint(1, 100) <= fill_percentage:
                for value in range(min_val, max_val + 1):
                    if valid(row, column, value):
                        grid[row][column] = value
                        break

    return grid

# Function to create textboxes based on the grid
def textboxes(win, grid, width, height):
    rows = len(grid)
    columns = len(grid[0])
    box_width = width / columns
    box_height = height / rows

    for row_idx, row_list in enumerate(grid):
        for col_idx, value in enumerate(row_list):
            x = col_idx * box_width + box_width / 2
            y = row_idx * box_height + box_height / 2
            if value is not None:
                text_obj = Text(Point(x, y), str(value))
                text_obj.draw(win)
            else:
                input_box = Entry(Point(x, y), 2)  # Empty text box
                input_box.draw(win)

# button that closes the window
def ButtonQuit(win, text, command):
    button_rect = Rectangle(Point(320, 600), Point(420, 640))
    button_rect.setFill("grey")
    button_rect.draw(win)
    button_text = Text(Point(370, 620), text)
    button_text.draw(win)

    click_point = win.getMouse()
    x_click, y_click = click_point.getX(), click_point.getY()

    if 320 <= x_click <= 420 and 600 <= 640:
        command()

# check the solution of the Sudoku grid
def check_solution(grid):
    def is_valid(row, col, num):
        for i in range(9):
            if grid[row][i] == num or grid[i][col] == num:
                return False
        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
        for i in range(3):
            for j in range(3):
                if grid[i + start_row][j + start_col] == num:
                    return False
        return True

    for row in range(9):
        for col in range(9):
            if grid[row][col] is None:
                return False
            if not is_valid(row, col, grid[row][col]):
                return False
    return True

#"Check" button and validate the Sudoku solution

def check_solution(grid):
    def is_valid(row, col, num):
        for i in range(9):
            if grid[row][i] == num or grid[i][col] == num:
                return False
        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
        for i in range(3):
            for j in range(3):
                if grid[i + start_row][j + start_col] == num:
                    return False
        return True

    for row in range(9):
        for col in range(9):
            if grid[row][col] is None:
                return False
            if not is_valid(row, col, grid[row][col]):
                return False
    return True

def ButtonCheck(win, text, grid):
    button_rect = Rectangle(Point(120, 600), Point(220, 640))
    button_rect.setFill("grey")
    button_rect.draw(win)
    button_text = Text(Point(170, 620), text)
    button_text.draw(win)

    click_point = win.getMouse()
    x_click, y_click = click_point.getX(), click_point.getY()

    if 120 <= x_click <= 220 and 600 <= y_click <= 640:
        if check_solution(grid):
            msg = Text(Point(win.getWidth() / 2, win.getHeight() - 20), "Sudoku solution is correct!")
            msg.setTextColor("green")
            msg.draw(win)
        else:
            msg = Text(Point(win.getWidth() / 2, win.getHeight() - 20), "Sudoku solution is incorrect!")
            msg.setTextColor("red")
            msg.draw(win)

def main():
    difficulty = input("Choose a difficulty Easy, Medium, Hard: ")
    if difficulty == "Easy":
        percentage = 50
    elif difficulty == "Medium":
        percentage = 20
    elif difficulty == "Hard":
        percentage = 10

    win = GraphWin("Sudoku", 640, 640)
    win.setBackground("white")
    random_grid = num_grid(9, 9, 1, 9, percentage)
    grid(win, 9, 9, win.getWidth(), 440)
    textboxes(win, random_grid, win.getWidth(), 440)
    ButtonQuit(win, "Quit", win.quit)
    ButtonCheck(win, "Check", random_grid)
    win.getMouse()  # Wait for a final interaction before closing
    win.close()

if __name__ == "__main__":
    main()
